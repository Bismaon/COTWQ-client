{"ast":null,"code":"// UserSession.ts\nimport{UserModel}from\"../models/UserModel\";import{generateUUID}from\"three/src/math/MathUtils\";/**\r\n * Interface representing a mapping of user IDs to user profiles.\r\n */ /**\r\n * Manages user sessions, including user profiles, scores, and session data storage.\r\n */export class UserSession{/**\r\n\t * Creates an instance of UserSession.\r\n\t * Initializes user data from local storage or creates a new instance if no data exists.\r\n\t */constructor(){this.users=void 0;const storedUsers=localStorage.getItem(\"users\");this.users=this.validateUsersData(storedUsers);}/**\r\n\t * Sets the score for a specific game for a user.\r\n\t * @param id The user ID.\r\n\t * @param gameName The name of the game.\r\n\t * @param score The score to set.\r\n\t */setUserScore(id,gameName,score){this.users[id].getScores()[gameName]=score;this.saveUsersToLocalStorage();}/**\r\n\t * Retrieves all user profiles.\r\n\t * @returns A mapping of user IDs to user profiles.\r\n\t */getUsers(){return this.users;}/**\r\n\t * Retrieves scores for a specific game across all user profiles.\r\n\t * @param gameName The name of the game.\r\n\t * @returns A mapping of user names to scores for the specified game.\r\n\t */getScoresFor(gameName){const scores={};for(const id in this.users){const user=this.users[id];const score=user.getScores()[gameName]||0;if(score!==0){scores[user.getName()]=score;}}return scores;}/**\r\n\t * Retrieves the top high scores for a specific game.\r\n\t * @param game The name of the game.\r\n\t * @returns An array of tuples containing user names and scores, sorted by score in ascending order.\r\n\t */getHighScoreFor(game){const scores=this.getScoresFor(game);const scoreEntries=Object.entries(scores);scoreEntries.sort((a,b)=>a[1]-b[1]);return scoreEntries.slice(0,10);// Return top 10 scores\n}/**\r\n\t * Checks if a user ID exists in the current session (based on browser cookie).\r\n\t * @returns The user ID if found, otherwise null.\r\n\t */exists(){return this.getIdFromCookie();}/**\r\n\t * Creates a new user profile with a random ID and specified username.\r\n\t * Stores the user profile in the session and local storage.\r\n\t * @param username The username for the new user.\r\n\t */createUser(username){const id=generateUUID();this.users[id]=new UserModel(id,username,{});this.users[id].setUserIdInCookie();this.saveUsersToLocalStorage();}/**\r\n\t * Validates and parses user data retrieved from local storage.\r\n\t * @param storedData The stored data retrieved from local storage.\r\n\t * @returns A validated mapping of user IDs to user profiles.\r\n\t */validateUsersData(storedData){if(!storedData){console.error(\"No user data found in localStorage.\");return{};}try{const parsedData=JSON.parse(storedData);const validatedUsers={};for(const id in parsedData){const userData=parsedData[id];if(userData&&typeof userData===\"object\"&&\"id\"in userData&&\"name\"in userData&&\"scores\"in userData){validatedUsers[id]=new UserModel(userData.getID(),userData.getName(),userData.getScores());}else{console.error(\"Invalid user data for ID \\\"\".concat(id,\"\\\". Skipping.\"));}}return validatedUsers;}catch(error){console.error(\"Error parsing or validating user data:\",error);return{};}}/**\r\n\t * Saves the users data to local storage as a JSON string.\r\n\t */saveUsersToLocalStorage(){localStorage.setItem(\"users\",JSON.stringify(this.users));}/**\r\n\t * Retrieves the user ID from a browser cookie.\r\n\t * @returns The user ID retrieved from the cookie, or null if not found.\r\n\t */getIdFromCookie(){const cookieName=\"userId=\";const decodedCookie=decodeURIComponent(document.cookie);const cookieArray=decodedCookie.split(\";\");for(const cookie of cookieArray){let trimmedCookie=cookie.trim();if(trimmedCookie.indexOf(cookieName)===0){return trimmedCookie.substring(cookieName.length,trimmedCookie.length);}}return null;}}","map":{"version":3,"names":["UserModel","generateUUID","UserSession","constructor","users","storedUsers","localStorage","getItem","validateUsersData","setUserScore","id","gameName","score","getScores","saveUsersToLocalStorage","getUsers","getScoresFor","scores","user","getName","getHighScoreFor","game","scoreEntries","Object","entries","sort","a","b","slice","exists","getIdFromCookie","createUser","username","setUserIdInCookie","storedData","console","error","parsedData","JSON","parse","validatedUsers","userData","getID","concat","setItem","stringify","cookieName","decodedCookie","decodeURIComponent","document","cookie","cookieArray","split","trimmedCookie","trim","indexOf","substring","length"],"sources":["C:/Users/esteb/Documents/GitHub/COTWQ-server/server/client/src/services/UserSession.ts"],"sourcesContent":["// UserSession.ts\r\n\r\nimport { UserModel } from \"../models/UserModel\";\r\nimport { generateUUID } from \"three/src/math/MathUtils\";\r\n\r\n/**\r\n * Interface representing a mapping of user IDs to user profiles.\r\n */\r\nexport interface Users {\r\n\t[id: string]: UserModel;\r\n}\r\n\r\n/**\r\n * Manages user sessions, including user profiles, scores, and session data storage.\r\n */\r\nexport class UserSession {\r\n\tprivate readonly users: Users;\r\n\r\n\t/**\r\n\t * Creates an instance of UserSession.\r\n\t * Initializes user data from local storage or creates a new instance if no data exists.\r\n\t */\r\n\tconstructor() {\r\n\t\tconst storedUsers = localStorage.getItem(\"users\");\r\n\t\tthis.users = this.validateUsersData(storedUsers);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the score for a specific game for a user.\r\n\t * @param id The user ID.\r\n\t * @param gameName The name of the game.\r\n\t * @param score The score to set.\r\n\t */\r\n\tpublic setUserScore(id: string, gameName: string, score: number): void {\r\n\t\tthis.users[id].getScores()[gameName] = score;\r\n\t\tthis.saveUsersToLocalStorage();\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves all user profiles.\r\n\t * @returns A mapping of user IDs to user profiles.\r\n\t */\r\n\tpublic getUsers(): Users {\r\n\t\treturn this.users;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves scores for a specific game across all user profiles.\r\n\t * @param gameName The name of the game.\r\n\t * @returns A mapping of user names to scores for the specified game.\r\n\t */\r\n\tpublic getScoresFor(gameName: string): { [userName: string]: number } {\r\n\t\tconst scores: { [userName: string]: number } = {};\r\n\t\tfor (const id in this.users) {\r\n\t\t\tconst user: UserModel = this.users[id];\r\n\t\t\tconst score: number = user.getScores()[gameName] || 0;\r\n\t\t\tif (score !== 0) {\r\n\t\t\t\tscores[user.getName()] = score;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn scores;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the top high scores for a specific game.\r\n\t * @param game The name of the game.\r\n\t * @returns An array of tuples containing user names and scores, sorted by score in ascending order.\r\n\t */\r\n\tpublic getHighScoreFor(game: string): [string, number][] {\r\n\t\tconst scores: { [userName: string]: number } = this.getScoresFor(game);\r\n\t\tconst scoreEntries: [string, number][] = Object.entries(scores);\r\n\t\tscoreEntries.sort((a, b) => a[1] - b[1]);\r\n\t\treturn scoreEntries.slice(0, 10); // Return top 10 scores\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if a user ID exists in the current session (based on browser cookie).\r\n\t * @returns The user ID if found, otherwise null.\r\n\t */\r\n\tpublic exists(): string | null {\r\n\t\treturn this.getIdFromCookie();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new user profile with a random ID and specified username.\r\n\t * Stores the user profile in the session and local storage.\r\n\t * @param username The username for the new user.\r\n\t */\r\n\tpublic createUser(username: string): void {\r\n\t\tconst id: string = generateUUID();\r\n\t\tthis.users[id] = new UserModel(id, username, {});\r\n\t\tthis.users[id].setUserIdInCookie();\r\n\t\tthis.saveUsersToLocalStorage();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates and parses user data retrieved from local storage.\r\n\t * @param storedData The stored data retrieved from local storage.\r\n\t * @returns A validated mapping of user IDs to user profiles.\r\n\t */\r\n\tprivate validateUsersData(storedData: string | null): Users {\r\n\t\tif (!storedData) {\r\n\t\t\tconsole.error(\"No user data found in localStorage.\");\r\n\t\t\treturn {};\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tconst parsedData: { [id: string]: UserModel} = JSON.parse(storedData);\r\n\t\t\tconst validatedUsers: Users = {};\r\n\r\n\t\t\tfor (const id in parsedData) {\r\n\t\t\t\tconst userData = parsedData[id];\r\n\t\t\t\tif (userData && typeof userData === \"object\" && \"id\" in userData && \"name\" in userData && \"scores\" in userData) {\r\n\t\t\t\t\tvalidatedUsers[id] = new UserModel(userData.getID(), userData.getName(), userData.getScores());\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.error(`Invalid user data for ID \"${id}\". Skipping.`);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn validatedUsers;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"Error parsing or validating user data:\", error);\r\n\t\t\treturn {};\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Saves the users data to local storage as a JSON string.\r\n\t */\r\n\tprivate saveUsersToLocalStorage(): void {\r\n\t\tlocalStorage.setItem(\"users\", JSON.stringify(this.users));\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the user ID from a browser cookie.\r\n\t * @returns The user ID retrieved from the cookie, or null if not found.\r\n\t */\r\n\tprivate getIdFromCookie(): string | null {\r\n\t\tconst cookieName: string = \"userId=\";\r\n\t\tconst decodedCookie: string = decodeURIComponent(document.cookie);\r\n\t\tconst cookieArray: string[] = decodedCookie.split(\";\");\r\n\r\n\t\tfor (const cookie of cookieArray) {\r\n\t\t\tlet trimmedCookie: string = cookie.trim();\r\n\t\t\tif (trimmedCookie.indexOf(cookieName) === 0) {\r\n\t\t\t\treturn trimmedCookie.substring(cookieName.length, trimmedCookie.length);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}