{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\esteb\\\\Documents\\\\GitHub\\\\COTWQ-server\\\\client\\\\src\\\\components\\\\UserInformation.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst UserInformation = ({\n  userID\n}) => {\n  _s();\n  const [userData, setUserData] = useState(null);\n  const [error, setError] = useState(null);\n  const fetchUserData = async () => {\n    try {\n      const response = await fetch('/users/fetch-user', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          id: userID\n        }) // Need to make the user login and keep track of his ID\n      });\n      if (response.ok) {\n        const userData = await response.json();\n        setUserData(userData);\n        console.log(\"succcess\");\n      } else {\n        const errorText = await response.text();\n        setError(`Failed to fetch user: ${errorText}`);\n      }\n    } catch (error) {\n      console.error('Error fetching user: ', error);\n      setError('Error during user DB call.');\n    }\n  };\n  useEffect(() => {\n    fetchUserData();\n  }, [userID]);\n  if (userData != null) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"User Information\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"ID: \", userData.id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Username: \", userData.username]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Highscores:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: Object.entries(userData.highscores).map(([game, score]) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [game, \": \", score]\n        }, game, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 6\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"User Information\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 5\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'red'\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true);\n  }\n};\n_s(UserInformation, \"/HRcFU7gqxiwr4XfW3ENXlP9MF0=\");\n_c = UserInformation;\nexport default UserInformation;\nvar _c;\n$RefreshReg$(_c, \"UserInformation\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","UserInformation","userID","_s","userData","setUserData","error","setError","fetchUserData","response","fetch","method","headers","body","JSON","stringify","id","ok","json","console","log","errorText","text","children","fileName","_jsxFileName","lineNumber","columnNumber","username","Object","entries","highscores","map","game","score","style","color","_c","$RefreshReg$"],"sources":["C:/Users/esteb/Documents/GitHub/COTWQ-server/client/src/components/UserInformation.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { UserModel } from '../models/UserModel';\n\nconst UserInformation: React.FC<{userID:number}> = ({ userID }) => {\n\tconst [userData, setUserData] = useState<UserModel|null>(null);\n\tconst [error, setError] = useState<string | null>(null);\n\n\tconst fetchUserData = async () => {\n\t\ttry {\n\t\t\tconst response = await fetch('/users/fetch-user', {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify({ id: userID }), // Need to make the user login and keep track of his ID\n\t\t\t});\n\n\t\t\tif (response.ok) {\n\t\t\t\tconst userData = await response.json();\n\t\t\t\tsetUserData(userData);\n\t\t\t\tconsole.log(\"succcess\");\n\t\t\t} else {\n\t\t\t\tconst errorText = await response.text();\n\t\t\t\tsetError(`Failed to fetch user: ${errorText}`);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error('Error fetching user: ', error);\n\t\t\tsetError('Error during user DB call.');\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tfetchUserData();\n\t}, [userID]);\n\n\tif (userData!=null){\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<h2>User Information</h2>\n\t\t\t\t<p>ID: {userData.id}</p>\n\t\t\t\t<p>Username: {userData.username}</p>\n\t\t\t\t<h3>Highscores:</h3>\n\t\t\t\t<ul>\n\t\t\t\t\t{Object.entries(userData.highscores).map(([game, score]: [string, number]) => (\n\t\t\t\t\t<li key={game}>\n\t\t\t\t\t\t{game}: {score}\n\t\t\t\t\t</li>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t</>\n\t\t);\n\t} else {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<h2>User Information</h2>\n\t\t\t\t{error && <p style={{ color: 'red' }}>{error}</p>}\n\t\t\t</>\n\t\t);\n\t}\n\t\n};\n\nexport default UserInformation;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}