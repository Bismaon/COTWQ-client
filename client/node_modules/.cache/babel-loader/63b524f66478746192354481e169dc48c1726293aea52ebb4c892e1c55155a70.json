{"ast":null,"code":"// UserSession.ts\n\nimport { UserModel } from \"../models/UserModel\";\nimport { generateUUID } from \"three/src/math/MathUtils\";\n\n/**\r\n * Interface representing a mapping of user IDs to user profiles.\r\n */\n\n/**\r\n * Manages user sessions, including user profiles, scores, and session data storage.\r\n */\nexport class UserSession {\n  /**\r\n   * Creates an instance of UserSession.\r\n   * Initializes user data from local storage or creates a new instance if no data exists.\r\n   */\n  constructor() {\n    this.users = void 0;\n    const storedUsers = localStorage.getItem(\"users\");\n    this.users = this.validateUsersData(storedUsers);\n  }\n\n  /**\r\n   * Sets the score for a specific game for a user.\r\n   * @param id The user ID.\r\n   * @param gameName The name of the game.\r\n   * @param score The score to set.\r\n   */\n  setUserScore(id, gameName, score) {\n    this.users[id].getScores()[gameName] = score;\n    this.saveUsersToLocalStorage();\n  }\n\n  /**\r\n   * Retrieves all user profiles.\r\n   * @returns A mapping of user IDs to user profiles.\r\n   */\n  getUsers() {\n    return this.users;\n  }\n\n  /**\r\n   * Retrieves scores for a specific game across all user profiles.\r\n   * @param gameName The name of the game.\r\n   * @returns A mapping of user names to scores for the specified game.\r\n   */\n  getScoresFor(gameName) {\n    const scores = {};\n    for (const id in this.users) {\n      const user = this.users[id];\n      const score = user.getScores()[gameName] || 0;\n      if (score !== 0) {\n        scores[user.getName()] = score;\n      }\n    }\n    return scores;\n  }\n\n  /**\r\n   * Retrieves the top high scores for a specific game.\r\n   * @param game The name of the game.\r\n   * @returns An array of tuples containing user names and scores, sorted by score in ascending order.\r\n   */\n  getHighScoreFor(game) {\n    const scores = this.getScoresFor(game);\n    const scoreEntries = Object.entries(scores);\n    scoreEntries.sort((a, b) => a[1] - b[1]);\n    return scoreEntries.slice(0, 10); // Return top 10 scores\n  }\n\n  /**\r\n   * Checks if a user ID exists in the current session (based on browser cookie).\r\n   * @returns The user ID if found, otherwise null.\r\n   */\n  exists() {\n    return this.getIdFromCookie();\n  }\n\n  /**\r\n   * Creates a new user profile with a random ID and specified username.\r\n   * Stores the user profile in the session and local storage.\r\n   * @param username The username for the new user.\r\n   */\n  createUser(username) {\n    const id = generateUUID();\n    this.users[id] = new UserModel(id, username, {});\n    this.users[id].setUserIdInCookie();\n    this.saveUsersToLocalStorage();\n  }\n\n  /**\r\n   * Validates and parses user data retrieved from local storage.\r\n   * @param storedData The stored data retrieved from local storage.\r\n   * @returns A validated mapping of user IDs to user profiles.\r\n   */\n  validateUsersData(storedData) {\n    if (!storedData) {\n      console.error(\"No user data found in localStorage.\");\n      return {};\n    }\n    try {\n      const parsedData = JSON.parse(storedData);\n      const validatedUsers = {};\n      for (const id in parsedData) {\n        const userData = parsedData[id];\n        if (userData && typeof userData === \"object\" && \"id\" in userData && \"name\" in userData && \"scores\" in userData) {\n          validatedUsers[id] = new UserModel(userData.getID(), userData.getName(), userData.getScores());\n        } else {\n          console.error(`Invalid user data for ID \"${id}\". Skipping.`);\n        }\n      }\n      return validatedUsers;\n    } catch (error) {\n      console.error(\"Error parsing or validating user data:\", error);\n      return {};\n    }\n  }\n\n  /**\r\n   * Saves the users data to local storage as a JSON string.\r\n   */\n  saveUsersToLocalStorage() {\n    localStorage.setItem(\"users\", JSON.stringify(this.users));\n  }\n\n  /**\r\n   * Retrieves the user ID from a browser cookie.\r\n   * @returns The user ID retrieved from the cookie, or null if not found.\r\n   */\n  getIdFromCookie() {\n    const cookieName = \"userId=\";\n    const decodedCookie = decodeURIComponent(document.cookie);\n    const cookieArray = decodedCookie.split(\";\");\n    for (const cookie of cookieArray) {\n      let trimmedCookie = cookie.trim();\n      if (trimmedCookie.indexOf(cookieName) === 0) {\n        return trimmedCookie.substring(cookieName.length, trimmedCookie.length);\n      }\n    }\n    return null;\n  }\n}","map":{"version":3,"names":["UserModel","generateUUID","UserSession","constructor","users","storedUsers","localStorage","getItem","validateUsersData","setUserScore","id","gameName","score","getScores","saveUsersToLocalStorage","getUsers","getScoresFor","scores","user","getName","getHighScoreFor","game","scoreEntries","Object","entries","sort","a","b","slice","exists","getIdFromCookie","createUser","username","setUserIdInCookie","storedData","console","error","parsedData","JSON","parse","validatedUsers","userData","getID","setItem","stringify","cookieName","decodedCookie","decodeURIComponent","document","cookie","cookieArray","split","trimmedCookie","trim","indexOf","substring","length"],"sources":["C:/Users/esteb/Documents/GitHub/COTWQ-server/server/client/src/services/UserSession.ts"],"sourcesContent":["// UserSession.ts\r\n\r\nimport { UserModel } from \"../models/UserModel\";\r\nimport { generateUUID } from \"three/src/math/MathUtils\";\r\n\r\n/**\r\n * Interface representing a mapping of user IDs to user profiles.\r\n */\r\nexport interface Users {\r\n\t[id: string]: UserModel;\r\n}\r\n\r\n/**\r\n * Manages user sessions, including user profiles, scores, and session data storage.\r\n */\r\nexport class UserSession {\r\n\tprivate readonly users: Users;\r\n\r\n\t/**\r\n\t * Creates an instance of UserSession.\r\n\t * Initializes user data from local storage or creates a new instance if no data exists.\r\n\t */\r\n\tconstructor() {\r\n\t\tconst storedUsers = localStorage.getItem(\"users\");\r\n\t\tthis.users = this.validateUsersData(storedUsers);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the score for a specific game for a user.\r\n\t * @param id The user ID.\r\n\t * @param gameName The name of the game.\r\n\t * @param score The score to set.\r\n\t */\r\n\tpublic setUserScore(id: string, gameName: string, score: number): void {\r\n\t\tthis.users[id].getScores()[gameName] = score;\r\n\t\tthis.saveUsersToLocalStorage();\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves all user profiles.\r\n\t * @returns A mapping of user IDs to user profiles.\r\n\t */\r\n\tpublic getUsers(): Users {\r\n\t\treturn this.users;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves scores for a specific game across all user profiles.\r\n\t * @param gameName The name of the game.\r\n\t * @returns A mapping of user names to scores for the specified game.\r\n\t */\r\n\tpublic getScoresFor(gameName: string): { [userName: string]: number } {\r\n\t\tconst scores: { [userName: string]: number } = {};\r\n\t\tfor (const id in this.users) {\r\n\t\t\tconst user: UserModel = this.users[id];\r\n\t\t\tconst score: number = user.getScores()[gameName] || 0;\r\n\t\t\tif (score !== 0) {\r\n\t\t\t\tscores[user.getName()] = score;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn scores;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the top high scores for a specific game.\r\n\t * @param game The name of the game.\r\n\t * @returns An array of tuples containing user names and scores, sorted by score in ascending order.\r\n\t */\r\n\tpublic getHighScoreFor(game: string): [string, number][] {\r\n\t\tconst scores: { [userName: string]: number } = this.getScoresFor(game);\r\n\t\tconst scoreEntries: [string, number][] = Object.entries(scores);\r\n\t\tscoreEntries.sort((a, b) => a[1] - b[1]);\r\n\t\treturn scoreEntries.slice(0, 10); // Return top 10 scores\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if a user ID exists in the current session (based on browser cookie).\r\n\t * @returns The user ID if found, otherwise null.\r\n\t */\r\n\tpublic exists(): string | null {\r\n\t\treturn this.getIdFromCookie();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new user profile with a random ID and specified username.\r\n\t * Stores the user profile in the session and local storage.\r\n\t * @param username The username for the new user.\r\n\t */\r\n\tpublic createUser(username: string): void {\r\n\t\tconst id: string = generateUUID();\r\n\t\tthis.users[id] = new UserModel(id, username, {});\r\n\t\tthis.users[id].setUserIdInCookie();\r\n\t\tthis.saveUsersToLocalStorage();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates and parses user data retrieved from local storage.\r\n\t * @param storedData The stored data retrieved from local storage.\r\n\t * @returns A validated mapping of user IDs to user profiles.\r\n\t */\r\n\tprivate validateUsersData(storedData: string | null): Users {\r\n\t\tif (!storedData) {\r\n\t\t\tconsole.error(\"No user data found in localStorage.\");\r\n\t\t\treturn {};\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tconst parsedData: { [id: string]: UserModel} = JSON.parse(storedData);\r\n\t\t\tconst validatedUsers: Users = {};\r\n\r\n\t\t\tfor (const id in parsedData) {\r\n\t\t\t\tconst userData = parsedData[id];\r\n\t\t\t\tif (userData && typeof userData === \"object\" && \"id\" in userData && \"name\" in userData && \"scores\" in userData) {\r\n\t\t\t\t\tvalidatedUsers[id] = new UserModel(userData.getID(), userData.getName(), userData.getScores());\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.error(`Invalid user data for ID \"${id}\". Skipping.`);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn validatedUsers;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"Error parsing or validating user data:\", error);\r\n\t\t\treturn {};\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Saves the users data to local storage as a JSON string.\r\n\t */\r\n\tprivate saveUsersToLocalStorage(): void {\r\n\t\tlocalStorage.setItem(\"users\", JSON.stringify(this.users));\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the user ID from a browser cookie.\r\n\t * @returns The user ID retrieved from the cookie, or null if not found.\r\n\t */\r\n\tprivate getIdFromCookie(): string | null {\r\n\t\tconst cookieName: string = \"userId=\";\r\n\t\tconst decodedCookie: string = decodeURIComponent(document.cookie);\r\n\t\tconst cookieArray: string[] = decodedCookie.split(\";\");\r\n\r\n\t\tfor (const cookie of cookieArray) {\r\n\t\t\tlet trimmedCookie: string = cookie.trim();\r\n\t\t\tif (trimmedCookie.indexOf(cookieName) === 0) {\r\n\t\t\t\treturn trimmedCookie.substring(cookieName.length, trimmedCookie.length);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}