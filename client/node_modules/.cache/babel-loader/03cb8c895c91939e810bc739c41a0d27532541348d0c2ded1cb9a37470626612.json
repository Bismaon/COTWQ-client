{"ast":null,"code":"// countriesTable.ts\n\n/** Represents the population of each continent. */\nconst continentPopulation = [56, 49, 3, 52, 19, 45];\n\n/** Represents the real population of each continent. */\nconst continentRealPopulation = [53, 35, 3, 48, 13, 42];\n\n/**\r\n * Creates a table displaying countries grouped by continent.\r\n * @param {Country[]} data - An array of Country objects containing country data.\r\n * @returns {void}\r\n */\nexport function createTable(data) {\n  // Reference to the container div where the table will be placed\n  const tableContainer = document.getElementById(\"country-continent-name-container\");\n  if (!tableContainer) {\n    console.error(\"Table container not found!\");\n    return;\n  }\n\n  // Define the continent names\n  const continentNames = [\"Africa\", \"America\", \"Antarctic\", \"Asia\", \"Oceania\", \"Europe\"];\n\n  // Create a container for the tables\n  const tablesContainer = document.createElement(\"table\");\n  tablesContainer.classList.add(\"tables-container\");\n  const tableRow = tablesContainer.createTBody().insertRow();\n\n  // Loop through each continent and create a table\n  continentNames.forEach((continent, index) => {\n    if (continent === \"Antarctic\") {\n      return;\n    }\n    const body = tableRow.insertCell();\n    body.classList.add(\"continent-table\");\n\n    // Create a table element\n    const table = document.createElement(\"table\");\n\n    // Create a table header row\n    const bodyRow = table.createTBody().insertRow();\n    const cell = bodyRow.insertCell();\n    cell.textContent = continent;\n    cell.className = continent.toLowerCase();\n    let className = \"cell\";\n\n    // Loop through the maximum items per column to populate rows\n    for (let i = 0; i < continentPopulation[index]; i++) {\n      const newRow = table.insertRow();\n\n      // Get the country index\n      const countryIndex = getIndexFromLocation(index, i);\n      const country = data[countryIndex];\n      if (country.getAcceptedNames().length === 0) {\n        continue;\n      }\n\n      // Create and insert cells into the row\n      const countryCell = newRow.insertCell();\n      countryCell.textContent = country.getCountryName();\n      countryCell.className = i < continentRealPopulation[index] ? className : className + \"-invisible\";\n    }\n    // Append the table to the container div\n    body.appendChild(table);\n  });\n  tableContainer.appendChild(tablesContainer);\n}\n\n/**\r\n * Gets the real index of a country based on its continent and local index.\r\n * @param {number} continent - The continent index.\r\n * @param {number} index - The local index of the country within its continent.\r\n * @returns {number} The real index of the country.\r\n */\nexport function getIndexFromLocation(continent, index) {\n  let realIndex = 0;\n\n  // Sum populations of previous continents up to the specified continent\n  for (let i = 0; i < continent; i++) {\n    realIndex += continentPopulation[i];\n  }\n\n  // Add local index within the specified continent\n  realIndex += index;\n  return realIndex;\n}","map":{"version":3,"names":["continentPopulation","continentRealPopulation","createTable","data","tableContainer","document","getElementById","console","error","continentNames","tablesContainer","createElement","classList","add","tableRow","createTBody","insertRow","forEach","continent","index","body","insertCell","table","bodyRow","cell","textContent","className","toLowerCase","i","newRow","countryIndex","getIndexFromLocation","country","getAcceptedNames","length","countryCell","getCountryName","appendChild","realIndex"],"sources":["C:/Users/esteb/Documents/GitHub/COTWQ-server/client/src/typescripts/countriesTable.ts"],"sourcesContent":["// countriesTable.ts\r\n\r\nimport { Country } from \"../models/Country\";\r\n\r\n/** Represents the population of each continent. */\r\nconst continentPopulation: [number, number, number, number, number, number] = [56, 49, 3, 52, 19, 45];\r\n\r\n/** Represents the real population of each continent. */\r\nconst continentRealPopulation: [number, number, number, number, number, number] = [53, 35, 3, 48, 13, 42];\r\n\r\n/**\r\n * Creates a table displaying countries grouped by continent.\r\n * @param {Country[]} data - An array of Country objects containing country data.\r\n * @returns {void}\r\n */\r\nexport function createTable(data: Country[]): void {\r\n\t// Reference to the container div where the table will be placed\r\n\tconst tableContainer: HTMLElement | null = document.getElementById(\"country-continent-name-container\");\r\n\r\n\tif (!tableContainer) {\r\n\t\tconsole.error(\"Table container not found!\");\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Define the continent names\r\n\tconst continentNames: string[] = [\"Africa\", \"America\", \"Antarctic\", \"Asia\", \"Oceania\", \"Europe\"];\r\n\r\n\t// Create a container for the tables\r\n\tconst tablesContainer: HTMLTableElement = document.createElement(\"table\");\r\n\ttablesContainer.classList.add(\"tables-container\");\r\n\tconst tableRow: HTMLTableRowElement = tablesContainer.createTBody().insertRow();\r\n\r\n\t// Loop through each continent and create a table\r\n\tcontinentNames.forEach((continent: string, index: number):void => {\r\n\t\tif (continent === \"Antarctic\") {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst body: HTMLTableCellElement = tableRow.insertCell();\r\n\t\tbody.classList.add(\"continent-table\");\r\n\r\n\t\t// Create a table element\r\n\t\tconst table: HTMLTableElement = document.createElement(\"table\");\r\n\r\n\t\t// Create a table header row\r\n\t\tconst bodyRow: HTMLTableRowElement = table.createTBody().insertRow();\r\n\t\tconst cell: HTMLTableCellElement = bodyRow.insertCell();\r\n\t\tcell.textContent = continent;\r\n\t\tcell.className = continent.toLowerCase();\r\n\r\n\t\tlet className: string = \"cell\";\r\n\r\n\t\t// Loop through the maximum items per column to populate rows\r\n\t\tfor (let i: number = 0; i < continentPopulation[index]; i++) {\r\n\t\t\tconst newRow: HTMLTableRowElement = table.insertRow();\r\n\r\n\t\t\t// Get the country index\r\n\t\t\tconst countryIndex: number = getIndexFromLocation(index, i);\r\n\t\t\tconst country: Country = data[countryIndex];\r\n\t\t\tif (country.getAcceptedNames().length === 0) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\t// Create and insert cells into the row\r\n\t\t\tconst countryCell: HTMLTableCellElement = newRow.insertCell();\r\n\t\t\tcountryCell.textContent = country.getCountryName();\r\n\t\t\tcountryCell.className = i < continentRealPopulation[index] ? className : className + \"-invisible\";\r\n\t\t}\r\n\t\t// Append the table to the container div\r\n\t\tbody.appendChild(table);\r\n\t});\r\n\r\n\ttableContainer.appendChild(tablesContainer);\r\n}\r\n\r\n/**\r\n * Gets the real index of a country based on its continent and local index.\r\n * @param {number} continent - The continent index.\r\n * @param {number} index - The local index of the country within its continent.\r\n * @returns {number} The real index of the country.\r\n */\r\nexport function getIndexFromLocation(continent: number, index: number): number {\r\n\tlet realIndex: number = 0;\r\n\r\n\t// Sum populations of previous continents up to the specified continent\r\n\tfor (let i: number = 0; i < continent; i++) {\r\n\t\trealIndex += continentPopulation[i];\r\n\t}\r\n\r\n\t\r\n\t// Add local index within the specified continent\r\n\trealIndex += index;\r\n\t\r\n\treturn realIndex;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}