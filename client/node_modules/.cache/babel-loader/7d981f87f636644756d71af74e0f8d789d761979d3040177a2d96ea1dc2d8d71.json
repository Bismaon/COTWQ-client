{"ast":null,"code":"// Countries.ts\n\nimport { Country } from \"./Country\";\nimport { countriesData } from \"../typescripts/countriesData\";\n\n/**\r\n * Represents a collection of countries.\r\n */\nexport class Countries {\n  /**\r\n   * Creates an instance of Countries.\r\n   */\n  constructor() {\n    this.countriesArray = void 0;\n    this.countriesFound = void 0;\n    this.arraySize = void 0;\n    this.countriesArray = this.setCountries();\n    this.arraySize = this.countriesArray.length;\n    this.countriesFound = 0;\n  }\n\n  /**\r\n   * Get the array of countries.\r\n   * @returns {Country[]} The array of countries.\r\n   */\n  getCountriesArray() {\n    return this.countriesArray;\n  }\n\n  /**\r\n   * Increment the count of found countries.\r\n   */\n  incrementFound() {\n    this.countriesFound++;\n  }\n\n  /**\r\n   * Get the size of the countries array.\r\n   * @returns {number} The size of the countries array.\r\n   */\n  getSize() {\n    return this.arraySize;\n  }\n\n  /**\r\n   * Get the count of found countries.\r\n   * @returns {number} The count of found countries.\r\n   */\n  getFound() {\n    return this.countriesFound;\n  }\n\n  /**\r\n   * Check if all countries are found.\r\n   * @returns {boolean} True if all countries are found, false otherwise.\r\n   */\n  isAllFound() {\n    return this.countriesFound === this.arraySize;\n  }\n\n  /**\r\n   * Check if a country exists by name.\r\n   * @param {string} name The name of the country.\r\n   * @returns {number} The index of the country if found, otherwise -1.\r\n   */\n  exists(name) {\n    return this.countriesArray.findIndex(obj => obj.getAcceptedNames().includes(name));\n  }\n\n  /**\r\n   * Clear the found status of all countries.\r\n   */\n  clearFound() {\n    for (let i = 0; i < this.countriesArray.length; i++) {\n      if (this.countriesArray[i].getFound()) {\n        this.countriesArray[i].setFound(false);\n      }\n    }\n  }\n\n  /**\r\n   * Initialize and populate the countries array.\r\n   * @returns {Country[]} The populated countries array.\r\n   */\n  setCountries() {\n    const newCountries = [];\n    for (let i = 0; i < countriesData.length; i++) {\n      const countryData = countriesData[i];\n      const countryName = countryData.name;\n      const countryLocation = countryData.location;\n      const countryTerritoriesLocation = countryData.territories;\n      const ownedLocation = countryData.ownedLocation;\n      const acceptedNames = countryData.acceptedNames;\n      const newCountry = new Country(countryName, acceptedNames, countryTerritoriesLocation, countryLocation, ownedLocation);\n      newCountries.push(newCountry);\n    }\n    return newCountries;\n  }\n}","map":{"version":3,"names":["Country","countriesData","Countries","constructor","countriesArray","countriesFound","arraySize","setCountries","length","getCountriesArray","incrementFound","getSize","getFound","isAllFound","exists","name","findIndex","obj","getAcceptedNames","includes","clearFound","i","setFound","newCountries","countryData","countryName","countryLocation","location","countryTerritoriesLocation","territories","ownedLocation","acceptedNames","newCountry","push"],"sources":["C:/Users/esteb/Documents/GitHub/COTWQ-server/server/client/src/models/Countries.ts"],"sourcesContent":["// Countries.ts\r\n\r\nimport {Country} from \"./Country\";\r\nimport {countriesData} from \"../typescripts/countriesData\";\r\n\r\n/**\r\n * Represents a collection of countries.\r\n */\r\nexport class Countries {\r\n\r\n\tprotected countriesArray: Country[];\r\n\tprotected countriesFound: number;\r\n\tprotected arraySize: number;\r\n\r\n\t/**\r\n\t * Creates an instance of Countries.\r\n\t */\r\n\tconstructor() {\r\n\t\tthis.countriesArray = this.setCountries();\r\n\t\tthis.arraySize = this.countriesArray.length;\r\n\t\tthis.countriesFound = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Get the array of countries.\r\n\t * @returns {Country[]} The array of countries.\r\n\t */\r\n\tpublic getCountriesArray(): Country[] {\r\n\t\treturn this.countriesArray;\r\n\t}\r\n\r\n\t/**\r\n\t * Increment the count of found countries.\r\n\t */\r\n\tpublic incrementFound(): void {\r\n\t\tthis.countriesFound++;\r\n\t}\r\n\r\n\t/**\r\n\t * Get the size of the countries array.\r\n\t * @returns {number} The size of the countries array.\r\n\t */\r\n\tpublic getSize(): number {\r\n\t\treturn this.arraySize;\r\n\t}\r\n\r\n\t/**\r\n\t * Get the count of found countries.\r\n\t * @returns {number} The count of found countries.\r\n\t */\r\n\tpublic getFound(): number {\r\n\t\treturn this.countriesFound;\r\n\t}\r\n\r\n\t/**\r\n\t * Check if all countries are found.\r\n\t * @returns {boolean} True if all countries are found, false otherwise.\r\n\t */\r\n\tpublic isAllFound(): boolean {\r\n\t\treturn this.countriesFound === this.arraySize;\r\n\t}\r\n\r\n\t/**\r\n\t * Check if a country exists by name.\r\n\t * @param {string} name The name of the country.\r\n\t * @returns {number} The index of the country if found, otherwise -1.\r\n\t */\r\n\tpublic exists(name: string): number {\r\n\t\treturn this.countriesArray.findIndex(obj => (obj.getAcceptedNames().includes(name)));\r\n\t}\r\n\r\n\t/**\r\n\t * Clear the found status of all countries.\r\n\t */\r\n\tpublic clearFound(): void {\r\n\t\tfor (let i = 0; i < this.countriesArray.length; i++) {\r\n\t\t\tif (this.countriesArray[i].getFound()) {\r\n\t\t\t\tthis.countriesArray[i].setFound(false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Initialize and populate the countries array.\r\n\t * @returns {Country[]} The populated countries array.\r\n\t */\r\n\tprivate setCountries(): Country[] {\r\n\t\tconst newCountries: Country[] = [];\r\n\t\tfor (let i:number = 0; i < countriesData.length; i++) {\r\n\t\t\tconst countryData: countriesData = countriesData[i];\r\n\r\n\t\t\tconst countryName: string = countryData.name;\r\n\t\t\tconst countryLocation: number[] = countryData.location;\r\n\t\t\tconst countryTerritoriesLocation: number[][] | null = countryData.territories;\r\n\t\t\tconst ownedLocation: number[] | null = countryData.ownedLocation;\r\n\t\t\tconst acceptedNames: string[] = countryData.acceptedNames;\r\n\r\n\t\t\tconst newCountry: Country = new Country(countryName, acceptedNames, countryTerritoriesLocation, countryLocation, ownedLocation);\r\n\t\t\tnewCountries.push(newCountry);\r\n\t\t}\r\n\t\treturn newCountries;\r\n\t}\r\n}\r\n"],"mappings":"AAAA;;AAEA,SAAQA,OAAO,QAAO,WAAW;AACjC,SAAQC,aAAa,QAAO,8BAA8B;;AAE1D;AACA;AACA;AACA,OAAO,MAAMC,SAAS,CAAC;EAMtB;AACD;AACA;EACCC,WAAWA,CAAA,EAAG;IAAA,KAPJC,cAAc;IAAA,KACdC,cAAc;IAAA,KACdC,SAAS;IAMlB,IAAI,CAACF,cAAc,GAAG,IAAI,CAACG,YAAY,CAAC,CAAC;IACzC,IAAI,CAACD,SAAS,GAAG,IAAI,CAACF,cAAc,CAACI,MAAM;IAC3C,IAAI,CAACH,cAAc,GAAG,CAAC;EACxB;;EAEA;AACD;AACA;AACA;EACQI,iBAAiBA,CAAA,EAAc;IACrC,OAAO,IAAI,CAACL,cAAc;EAC3B;;EAEA;AACD;AACA;EACQM,cAAcA,CAAA,EAAS;IAC7B,IAAI,CAACL,cAAc,EAAE;EACtB;;EAEA;AACD;AACA;AACA;EACQM,OAAOA,CAAA,EAAW;IACxB,OAAO,IAAI,CAACL,SAAS;EACtB;;EAEA;AACD;AACA;AACA;EACQM,QAAQA,CAAA,EAAW;IACzB,OAAO,IAAI,CAACP,cAAc;EAC3B;;EAEA;AACD;AACA;AACA;EACQQ,UAAUA,CAAA,EAAY;IAC5B,OAAO,IAAI,CAACR,cAAc,KAAK,IAAI,CAACC,SAAS;EAC9C;;EAEA;AACD;AACA;AACA;AACA;EACQQ,MAAMA,CAACC,IAAY,EAAU;IACnC,OAAO,IAAI,CAACX,cAAc,CAACY,SAAS,CAACC,GAAG,IAAKA,GAAG,CAACC,gBAAgB,CAAC,CAAC,CAACC,QAAQ,CAACJ,IAAI,CAAE,CAAC;EACrF;;EAEA;AACD;AACA;EACQK,UAAUA,CAAA,EAAS;IACzB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACjB,cAAc,CAACI,MAAM,EAAEa,CAAC,EAAE,EAAE;MACpD,IAAI,IAAI,CAACjB,cAAc,CAACiB,CAAC,CAAC,CAACT,QAAQ,CAAC,CAAC,EAAE;QACtC,IAAI,CAACR,cAAc,CAACiB,CAAC,CAAC,CAACC,QAAQ,CAAC,KAAK,CAAC;MACvC;IACD;EACD;;EAEA;AACD;AACA;AACA;EACSf,YAAYA,CAAA,EAAc;IACjC,MAAMgB,YAAuB,GAAG,EAAE;IAClC,KAAK,IAAIF,CAAQ,GAAG,CAAC,EAAEA,CAAC,GAAGpB,aAAa,CAACO,MAAM,EAAEa,CAAC,EAAE,EAAE;MACrD,MAAMG,WAA0B,GAAGvB,aAAa,CAACoB,CAAC,CAAC;MAEnD,MAAMI,WAAmB,GAAGD,WAAW,CAACT,IAAI;MAC5C,MAAMW,eAAyB,GAAGF,WAAW,CAACG,QAAQ;MACtD,MAAMC,0BAA6C,GAAGJ,WAAW,CAACK,WAAW;MAC7E,MAAMC,aAA8B,GAAGN,WAAW,CAACM,aAAa;MAChE,MAAMC,aAAuB,GAAGP,WAAW,CAACO,aAAa;MAEzD,MAAMC,UAAmB,GAAG,IAAIhC,OAAO,CAACyB,WAAW,EAAEM,aAAa,EAAEH,0BAA0B,EAAEF,eAAe,EAAEI,aAAa,CAAC;MAC/HP,YAAY,CAACU,IAAI,CAACD,UAAU,CAAC;IAC9B;IACA,OAAOT,YAAY;EACpB;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}