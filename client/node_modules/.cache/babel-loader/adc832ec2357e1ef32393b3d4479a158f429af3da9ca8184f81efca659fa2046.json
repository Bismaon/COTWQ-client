{"ast":null,"code":"// Countries.ts\nimport{Country}from\"./Country\";/**\r\n * Represents a collection of countries.\r\n */export class Countries{/**\r\n\t * Creates an instance of Countries.\r\n\t */constructor(){this.countriesArray=void 0;this.countriesFound=void 0;this.arraySize=void 0;this.countriesArray=this.setCountries();this.arraySize=this.countriesArray.length;this.countriesFound=0;}/**\r\n\t * Get the array of countries.\r\n\t * @returns {Country[]} The array of countries.\r\n\t */getCountriesArray(){return this.countriesArray;}/**\r\n\t * Increment the count of found countries.\r\n\t */incrementFound(){this.countriesFound++;}/**\r\n\t * Get the size of the countries array.\r\n\t * @returns {number} The size of the countries array.\r\n\t */getSize(){return this.arraySize;}/**\r\n\t * Get the count of found countries.\r\n\t * @returns {number} The count of found countries.\r\n\t */getFound(){return this.countriesFound;}/**\r\n\t * Check if all countries are found.\r\n\t * @returns {boolean} True if all countries are found, false otherwise.\r\n\t */isAllFound(){return this.countriesFound===this.arraySize;}/**\r\n\t * Check if a country exists by name.\r\n\t * @param {string} name The name of the country.\r\n\t * @returns {number} The index of the country if found, otherwise -1.\r\n\t */exists(name){return this.countriesArray.findIndex(obj=>obj.getAcceptedNames().includes(name));}/**\r\n\t * Clear the found status of all countries.\r\n\t */clearFound(){for(let i=0;i<this.countriesArray.length;i++){if(this.countriesArray[i].getFound()){this.countriesArray[i].setFound(false);}}}/**\r\n\t * Initialize and populate the countries array.\r\n\t * @returns {Country[]} The populated countries array.\r\n\t */setCountries(){const newCountries=[];for(let i=0;i<countriesData.length;i++){const countryData=countriesData[i];const countryName=countryData.name;const countryLocation=countryData.location;const countryTerritoriesLocation=countryData.territories;const ownedLocation=countryData.ownedLocation;const acceptedNames=countryData.acceptedNames;const newCountry=new Country(countryName,acceptedNames,countryTerritoriesLocation,countryLocation,ownedLocation);newCountries.push(newCountry);}return newCountries;}}","map":{"version":3,"names":["Country","Countries","constructor","countriesArray","countriesFound","arraySize","setCountries","length","getCountriesArray","incrementFound","getSize","getFound","isAllFound","exists","name","findIndex","obj","getAcceptedNames","includes","clearFound","i","setFound","newCountries","countriesData","countryData","countryName","countryLocation","location","countryTerritoriesLocation","territories","ownedLocation","acceptedNames","newCountry","push"],"sources":["C:/Users/esteb/Documents/GitHub/COTWQ-server/server/client/src/models/Countries.ts"],"sourcesContent":["// Countries.ts\r\n\r\nimport {Country} from \"./Country\";\r\nimport {countriesDataInterface} from \"../typescripts/countriesData\";\r\n\r\n/**\r\n * Represents a collection of countries.\r\n */\r\nexport class Countries {\r\n\r\n\tprotected countriesArray: Country[];\r\n\tprotected countriesFound: number;\r\n\tprotected arraySize: number;\r\n\r\n\t/**\r\n\t * Creates an instance of Countries.\r\n\t */\r\n\tconstructor() {\r\n\t\tthis.countriesArray = this.setCountries();\r\n\t\tthis.arraySize = this.countriesArray.length;\r\n\t\tthis.countriesFound = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Get the array of countries.\r\n\t * @returns {Country[]} The array of countries.\r\n\t */\r\n\tpublic getCountriesArray(): Country[] {\r\n\t\treturn this.countriesArray;\r\n\t}\r\n\r\n\t/**\r\n\t * Increment the count of found countries.\r\n\t */\r\n\tpublic incrementFound(): void {\r\n\t\tthis.countriesFound++;\r\n\t}\r\n\r\n\t/**\r\n\t * Get the size of the countries array.\r\n\t * @returns {number} The size of the countries array.\r\n\t */\r\n\tpublic getSize(): number {\r\n\t\treturn this.arraySize;\r\n\t}\r\n\r\n\t/**\r\n\t * Get the count of found countries.\r\n\t * @returns {number} The count of found countries.\r\n\t */\r\n\tpublic getFound(): number {\r\n\t\treturn this.countriesFound;\r\n\t}\r\n\r\n\t/**\r\n\t * Check if all countries are found.\r\n\t * @returns {boolean} True if all countries are found, false otherwise.\r\n\t */\r\n\tpublic isAllFound(): boolean {\r\n\t\treturn this.countriesFound === this.arraySize;\r\n\t}\r\n\r\n\t/**\r\n\t * Check if a country exists by name.\r\n\t * @param {string} name The name of the country.\r\n\t * @returns {number} The index of the country if found, otherwise -1.\r\n\t */\r\n\tpublic exists(name: string): number {\r\n\t\treturn this.countriesArray.findIndex(obj => (obj.getAcceptedNames().includes(name)));\r\n\t}\r\n\r\n\t/**\r\n\t * Clear the found status of all countries.\r\n\t */\r\n\tpublic clearFound(): void {\r\n\t\tfor (let i = 0; i < this.countriesArray.length; i++) {\r\n\t\t\tif (this.countriesArray[i].getFound()) {\r\n\t\t\t\tthis.countriesArray[i].setFound(false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Initialize and populate the countries array.\r\n\t * @returns {Country[]} The populated countries array.\r\n\t */\r\n\tprivate setCountries(): Country[] {\r\n\t\tconst newCountries: Country[] = [];\r\n\t\tfor (let i:number = 0; i < countriesData.length; i++) {\r\n\t\t\tconst countryData: countriesDataInterface = countriesData[i];\r\n\r\n\t\t\tconst countryName: string = countryData.name;\r\n\t\t\tconst countryLocation: number[] = countryData.location;\r\n\t\t\tconst countryTerritoriesLocation: number[][] | null = countryData.territories;\r\n\t\t\tconst ownedLocation: number[] | null = countryData.ownedLocation;\r\n\t\t\tconst acceptedNames: string[] = countryData.acceptedNames;\r\n\r\n\t\t\tconst newCountry: Country = new Country(countryName, acceptedNames, countryTerritoriesLocation, countryLocation, ownedLocation);\r\n\t\t\tnewCountries.push(newCountry);\r\n\t\t}\r\n\t\treturn newCountries;\r\n\t}\r\n}\r\n"],"mappings":"AAAA;AAEA,OAAQA,OAAO,KAAO,WAAW,CAGjC;AACA;AACA,GACA,MAAO,MAAM,CAAAC,SAAU,CAMtB;AACD;AACA,IACCC,WAAWA,CAAA,CAAG,MAPJC,cAAc,aACdC,cAAc,aACdC,SAAS,QAMlB,IAAI,CAACF,cAAc,CAAG,IAAI,CAACG,YAAY,CAAC,CAAC,CACzC,IAAI,CAACD,SAAS,CAAG,IAAI,CAACF,cAAc,CAACI,MAAM,CAC3C,IAAI,CAACH,cAAc,CAAG,CAAC,CACxB,CAEA;AACD;AACA;AACA,IACQI,iBAAiBA,CAAA,CAAc,CACrC,MAAO,KAAI,CAACL,cAAc,CAC3B,CAEA;AACD;AACA,IACQM,cAAcA,CAAA,CAAS,CAC7B,IAAI,CAACL,cAAc,EAAE,CACtB,CAEA;AACD;AACA;AACA,IACQM,OAAOA,CAAA,CAAW,CACxB,MAAO,KAAI,CAACL,SAAS,CACtB,CAEA;AACD;AACA;AACA,IACQM,QAAQA,CAAA,CAAW,CACzB,MAAO,KAAI,CAACP,cAAc,CAC3B,CAEA;AACD;AACA;AACA,IACQQ,UAAUA,CAAA,CAAY,CAC5B,MAAO,KAAI,CAACR,cAAc,GAAK,IAAI,CAACC,SAAS,CAC9C,CAEA;AACD;AACA;AACA;AACA,IACQQ,MAAMA,CAACC,IAAY,CAAU,CACnC,MAAO,KAAI,CAACX,cAAc,CAACY,SAAS,CAACC,GAAG,EAAKA,GAAG,CAACC,gBAAgB,CAAC,CAAC,CAACC,QAAQ,CAACJ,IAAI,CAAE,CAAC,CACrF,CAEA;AACD;AACA,IACQK,UAAUA,CAAA,CAAS,CACzB,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAG,IAAI,CAACjB,cAAc,CAACI,MAAM,CAAEa,CAAC,EAAE,CAAE,CACpD,GAAI,IAAI,CAACjB,cAAc,CAACiB,CAAC,CAAC,CAACT,QAAQ,CAAC,CAAC,CAAE,CACtC,IAAI,CAACR,cAAc,CAACiB,CAAC,CAAC,CAACC,QAAQ,CAAC,KAAK,CAAC,CACvC,CACD,CACD,CAEA;AACD;AACA;AACA,IACSf,YAAYA,CAAA,CAAc,CACjC,KAAM,CAAAgB,YAAuB,CAAG,EAAE,CAClC,IAAK,GAAI,CAAAF,CAAQ,CAAG,CAAC,CAAEA,CAAC,CAAGG,aAAa,CAAChB,MAAM,CAAEa,CAAC,EAAE,CAAE,CACrD,KAAM,CAAAI,WAAmC,CAAGD,aAAa,CAACH,CAAC,CAAC,CAE5D,KAAM,CAAAK,WAAmB,CAAGD,WAAW,CAACV,IAAI,CAC5C,KAAM,CAAAY,eAAyB,CAAGF,WAAW,CAACG,QAAQ,CACtD,KAAM,CAAAC,0BAA6C,CAAGJ,WAAW,CAACK,WAAW,CAC7E,KAAM,CAAAC,aAA8B,CAAGN,WAAW,CAACM,aAAa,CAChE,KAAM,CAAAC,aAAuB,CAAGP,WAAW,CAACO,aAAa,CAEzD,KAAM,CAAAC,UAAmB,CAAG,GAAI,CAAAhC,OAAO,CAACyB,WAAW,CAAEM,aAAa,CAAEH,0BAA0B,CAAEF,eAAe,CAAEI,aAAa,CAAC,CAC/HR,YAAY,CAACW,IAAI,CAACD,UAAU,CAAC,CAC9B,CACA,MAAO,CAAAV,YAAY,CACpB,CACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}