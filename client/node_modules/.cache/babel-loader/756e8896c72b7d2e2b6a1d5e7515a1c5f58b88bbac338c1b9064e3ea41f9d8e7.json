{"ast":null,"code":"// loader.ts\n\nimport * as THREE from \"three\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\n\n/**\r\n * Loads a 3D model and adds it to the scene.\r\n * @param {THREE.Scene} scene - The THREE.Scene where the model will be added.\r\n * @param {THREE.Material[]} colors - An array of materials representing colors.\r\n * @returns {Promise<THREE.Object3D>} A promise that resolves to the loaded model.\r\n */\nexport function loadModel(scene, colors) {\n  return new Promise((resolve, reject) => {\n    const loader = new GLTFLoader();\n    loader.load(\"../../assets/models/earth_political.glb\", function (gltf) {\n      const myModel = gltf.scene;\n\n      // Rotate the model (earth tilt)\n      const degrees = 23.5;\n      myModel.rotation.x = THREE.MathUtils.degToRad(degrees);\n      scene.add(myModel);\n      extractColors(myModel, colors);\n      resolve(myModel); // Resolve the promise with the loaded model\n    }, undefined, function (error) {\n      console.error(\"Error loading GLTF model:\", error);\n      reject(error); // Reject the promise with the error\n    });\n  });\n}\n\n/**\r\n * Extracts colors from the loaded model and adds them to the colors array.\r\n * @param {THREE.Object3D} model - The loaded 3D model.\r\n * @param {THREE.Material[]} colors - An array of materials representing colors.\r\n */\nfunction extractColors(model, colors) {\n  model.traverse(child => {\n    if (child instanceof THREE.Mesh && child.material) {\n      child.receiveShadow = false;\n      const material = child.material;\n      const materialName = material.name;\n      if (materialName !== \"water\" && colors.findIndex(obj => obj.name === materialName) === -1) {\n        colors.push(material.clone());\n      }\n    }\n  });\n}","map":{"version":3,"names":["THREE","GLTFLoader","loadModel","scene","colors","Promise","resolve","reject","loader","load","gltf","myModel","degrees","rotation","x","MathUtils","degToRad","add","extractColors","undefined","error","console","model","traverse","child","Mesh","material","receiveShadow","materialName","name","findIndex","obj","push","clone"],"sources":["C:/Users/esteb/Documents/GitHub/COTWQ-server/server/client/src/utils/loader.ts"],"sourcesContent":["// loader.ts\r\n\r\nimport * as THREE from \"three\";\r\nimport { GLTF, GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\r\n\r\n/**\r\n * Loads a 3D model and adds it to the scene.\r\n * @param {THREE.Scene} scene - The THREE.Scene where the model will be added.\r\n * @param {THREE.Material[]} colors - An array of materials representing colors.\r\n * @returns {Promise<THREE.Object3D>} A promise that resolves to the loaded model.\r\n */\r\nexport function loadModel(scene: THREE.Scene, colors: THREE.Material[]): Promise<THREE.Object3D> {\r\n\treturn new Promise((resolve, reject): void => {\r\n\t\tconst loader: GLTFLoader = new GLTFLoader();\r\n\t\tloader.load(\r\n\t\t\t\"../../assets/models/earth_political.glb\",\r\n\t\t\tfunction (gltf: GLTF): void {\r\n\t\t\t\tconst myModel: THREE.Object3D = gltf.scene;\r\n\r\n\t\t\t\t// Rotate the model (earth tilt)\r\n\t\t\t\tconst degrees: number = 23.5;\r\n\t\t\t\tmyModel.rotation.x = THREE.MathUtils.degToRad(degrees);\r\n\r\n\t\t\t\tscene.add(myModel);\r\n\t\t\t\textractColors(myModel, colors);\r\n\t\t\t\tresolve(myModel); // Resolve the promise with the loaded model\r\n\t\t\t},\r\n\t\t\tundefined,\r\n\t\t\tfunction (error): void {\r\n\t\t\t\tconsole.error(\"Error loading GLTF model:\", error);\r\n\t\t\t\treject(error); // Reject the promise with the error\r\n\t\t\t}\r\n\t\t);\r\n\t});\r\n}\r\n\r\n/**\r\n * Extracts colors from the loaded model and adds them to the colors array.\r\n * @param {THREE.Object3D} model - The loaded 3D model.\r\n * @param {THREE.Material[]} colors - An array of materials representing colors.\r\n */\r\nfunction extractColors(model: THREE.Object3D, colors: THREE.Material[]): void {\r\n\tmodel.traverse((child: THREE.Object3D) => {\r\n\t\tif (child instanceof THREE.Mesh && child.material) {\r\n\t\t\tchild.receiveShadow = false;\r\n\t\t\tconst material: THREE.Material = child.material;\r\n\t\t\tconst materialName: string = material.name;\r\n\t\t\tif (materialName !== \"water\" && colors.findIndex(obj => obj.name === materialName) === -1) {\r\n\t\t\t\tcolors.push(material.clone());\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n}\r\n"],"mappings":"AAAA;;AAEA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAAeC,UAAU,QAAQ,uCAAuC;;AAExE;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,SAASA,CAACC,KAAkB,EAAEC,MAAwB,EAA2B;EAChG,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAW;IAC7C,MAAMC,MAAkB,GAAG,IAAIP,UAAU,CAAC,CAAC;IAC3CO,MAAM,CAACC,IAAI,CACV,yCAAyC,EACzC,UAAUC,IAAU,EAAQ;MAC3B,MAAMC,OAAuB,GAAGD,IAAI,CAACP,KAAK;;MAE1C;MACA,MAAMS,OAAe,GAAG,IAAI;MAC5BD,OAAO,CAACE,QAAQ,CAACC,CAAC,GAAGd,KAAK,CAACe,SAAS,CAACC,QAAQ,CAACJ,OAAO,CAAC;MAEtDT,KAAK,CAACc,GAAG,CAACN,OAAO,CAAC;MAClBO,aAAa,CAACP,OAAO,EAAEP,MAAM,CAAC;MAC9BE,OAAO,CAACK,OAAO,CAAC,CAAC,CAAC;IACnB,CAAC,EACDQ,SAAS,EACT,UAAUC,KAAK,EAAQ;MACtBC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjDb,MAAM,CAACa,KAAK,CAAC,CAAC,CAAC;IAChB,CACD,CAAC;EACF,CAAC,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASF,aAAaA,CAACI,KAAqB,EAAElB,MAAwB,EAAQ;EAC7EkB,KAAK,CAACC,QAAQ,CAAEC,KAAqB,IAAK;IACzC,IAAIA,KAAK,YAAYxB,KAAK,CAACyB,IAAI,IAAID,KAAK,CAACE,QAAQ,EAAE;MAClDF,KAAK,CAACG,aAAa,GAAG,KAAK;MAC3B,MAAMD,QAAwB,GAAGF,KAAK,CAACE,QAAQ;MAC/C,MAAME,YAAoB,GAAGF,QAAQ,CAACG,IAAI;MAC1C,IAAID,YAAY,KAAK,OAAO,IAAIxB,MAAM,CAAC0B,SAAS,CAACC,GAAG,IAAIA,GAAG,CAACF,IAAI,KAAKD,YAAY,CAAC,KAAK,CAAC,CAAC,EAAE;QAC1FxB,MAAM,CAAC4B,IAAI,CAACN,QAAQ,CAACO,KAAK,CAAC,CAAC,CAAC;MAC9B;IACD;EACD,CAAC,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}