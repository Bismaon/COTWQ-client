{"ast":null,"code":"// loader.ts\nimport*as THREE from\"three\";import{GLTFLoader}from\"three/examples/jsm/loaders/GLTFLoader\";/**\r\n * Loads a 3D model and adds it to the scene.\r\n * @param {THREE.Scene} scene - The THREE.Scene where the model will be added.\r\n * @param {THREE.Material[]} colors - An array of materials representing colors.\r\n * @returns {Promise<THREE.Object3D>} A promise that resolves to the loaded model.\r\n */export function loadModel(scene,colors){return new Promise((resolve,reject)=>{const loader=new GLTFLoader();loader.load(\"../../assets/models/earth_political.glb\",function(gltf){const myModel=gltf.scene;// Rotate the model (earth tilt)\nconst degrees=23.5;myModel.rotation.x=THREE.MathUtils.degToRad(degrees);scene.add(myModel);extractColors(myModel,colors);resolve(myModel);// Resolve the promise with the loaded model\n},undefined,function(error){console.error(\"Error loading GLTF model:\",error);reject(error);// Reject the promise with the error\n});});}/**\r\n * Extracts colors from the loaded model and adds them to the colors array.\r\n * @param {THREE.Object3D} model - The loaded 3D model.\r\n * @param {THREE.Material[]} colors - An array of materials representing colors.\r\n */function extractColors(model,colors){model.traverse(child=>{if(child instanceof THREE.Mesh&&child.material){child.receiveShadow=false;const material=child.material;const materialName=material.name;if(materialName!==\"water\"&&colors.findIndex(obj=>obj.name===materialName)===-1){colors.push(material.clone());}}});}","map":{"version":3,"names":["THREE","GLTFLoader","loadModel","scene","colors","Promise","resolve","reject","loader","load","gltf","myModel","degrees","rotation","x","MathUtils","degToRad","add","extractColors","undefined","error","console","model","traverse","child","Mesh","material","receiveShadow","materialName","name","findIndex","obj","push","clone"],"sources":["C:/Users/esteb/Documents/GitHub/COTWQ-server/server/client/src/utils/loader.ts"],"sourcesContent":["// loader.ts\r\n\r\nimport * as THREE from \"three\";\r\nimport { GLTF, GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\r\n\r\n/**\r\n * Loads a 3D model and adds it to the scene.\r\n * @param {THREE.Scene} scene - The THREE.Scene where the model will be added.\r\n * @param {THREE.Material[]} colors - An array of materials representing colors.\r\n * @returns {Promise<THREE.Object3D>} A promise that resolves to the loaded model.\r\n */\r\nexport function loadModel(scene: THREE.Scene, colors: THREE.Material[]): Promise<THREE.Object3D> {\r\n\treturn new Promise((resolve, reject): void => {\r\n\t\tconst loader: GLTFLoader = new GLTFLoader();\r\n\t\tloader.load(\r\n\t\t\t\"../../assets/models/earth_political.glb\",\r\n\t\t\tfunction (gltf: GLTF): void {\r\n\t\t\t\tconst myModel: THREE.Object3D = gltf.scene;\r\n\r\n\t\t\t\t// Rotate the model (earth tilt)\r\n\t\t\t\tconst degrees: number = 23.5;\r\n\t\t\t\tmyModel.rotation.x = THREE.MathUtils.degToRad(degrees);\r\n\r\n\t\t\t\tscene.add(myModel);\r\n\t\t\t\textractColors(myModel, colors);\r\n\t\t\t\tresolve(myModel); // Resolve the promise with the loaded model\r\n\t\t\t},\r\n\t\t\tundefined,\r\n\t\t\tfunction (error): void {\r\n\t\t\t\tconsole.error(\"Error loading GLTF model:\", error);\r\n\t\t\t\treject(error); // Reject the promise with the error\r\n\t\t\t}\r\n\t\t);\r\n\t});\r\n}\r\n\r\n/**\r\n * Extracts colors from the loaded model and adds them to the colors array.\r\n * @param {THREE.Object3D} model - The loaded 3D model.\r\n * @param {THREE.Material[]} colors - An array of materials representing colors.\r\n */\r\nfunction extractColors(model: THREE.Object3D, colors: THREE.Material[]): void {\r\n\tmodel.traverse((child: THREE.Object3D) => {\r\n\t\tif (child instanceof THREE.Mesh && child.material) {\r\n\t\t\tchild.receiveShadow = false;\r\n\t\t\tconst material: THREE.Material = child.material;\r\n\t\t\tconst materialName: string = material.name;\r\n\t\t\tif (materialName !== \"water\" && colors.findIndex(obj => obj.name === materialName) === -1) {\r\n\t\t\t\tcolors.push(material.clone());\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n}\r\n"],"mappings":"AAAA;AAEA,MAAO,GAAK,CAAAA,KAAK,KAAM,OAAO,CAC9B,OAAeC,UAAU,KAAQ,uCAAuC,CAExE;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAC,SAASA,CAACC,KAAkB,CAAEC,MAAwB,CAA2B,CAChG,MAAO,IAAI,CAAAC,OAAO,CAAC,CAACC,OAAO,CAAEC,MAAM,GAAW,CAC7C,KAAM,CAAAC,MAAkB,CAAG,GAAI,CAAAP,UAAU,CAAC,CAAC,CAC3CO,MAAM,CAACC,IAAI,CACV,yCAAyC,CACzC,SAAUC,IAAU,CAAQ,CAC3B,KAAM,CAAAC,OAAuB,CAAGD,IAAI,CAACP,KAAK,CAE1C;AACA,KAAM,CAAAS,OAAe,CAAG,IAAI,CAC5BD,OAAO,CAACE,QAAQ,CAACC,CAAC,CAAGd,KAAK,CAACe,SAAS,CAACC,QAAQ,CAACJ,OAAO,CAAC,CAEtDT,KAAK,CAACc,GAAG,CAACN,OAAO,CAAC,CAClBO,aAAa,CAACP,OAAO,CAAEP,MAAM,CAAC,CAC9BE,OAAO,CAACK,OAAO,CAAC,CAAE;AACnB,CAAC,CACDQ,SAAS,CACT,SAAUC,KAAK,CAAQ,CACtBC,OAAO,CAACD,KAAK,CAAC,2BAA2B,CAAEA,KAAK,CAAC,CACjDb,MAAM,CAACa,KAAK,CAAC,CAAE;AAChB,CACD,CAAC,CACF,CAAC,CAAC,CACH,CAEA;AACA;AACA;AACA;AACA,GACA,QAAS,CAAAF,aAAaA,CAACI,KAAqB,CAAElB,MAAwB,CAAQ,CAC7EkB,KAAK,CAACC,QAAQ,CAAEC,KAAqB,EAAK,CACzC,GAAIA,KAAK,WAAY,CAAAxB,KAAK,CAACyB,IAAI,EAAID,KAAK,CAACE,QAAQ,CAAE,CAClDF,KAAK,CAACG,aAAa,CAAG,KAAK,CAC3B,KAAM,CAAAD,QAAwB,CAAGF,KAAK,CAACE,QAAQ,CAC/C,KAAM,CAAAE,YAAoB,CAAGF,QAAQ,CAACG,IAAI,CAC1C,GAAID,YAAY,GAAK,OAAO,EAAIxB,MAAM,CAAC0B,SAAS,CAACC,GAAG,EAAIA,GAAG,CAACF,IAAI,GAAKD,YAAY,CAAC,GAAK,CAAC,CAAC,CAAE,CAC1FxB,MAAM,CAAC4B,IAAI,CAACN,QAAQ,CAACO,KAAK,CAAC,CAAC,CAAC,CAC9B,CACD,CACD,CAAC,CAAC,CACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}