{"ast":null,"code":"// countriesTable.ts\n/** Represents the population of each continent. */const continentPopulation=[56,49,3,52,19,45];/** Represents the real population of each continent. */const continentRealPopulation=[53,35,3,48,13,42];/**\r\n * Creates a table displaying countries grouped by continent.\r\n * @param {Country[]} data - An array of Country objects containing country data.\r\n * @returns {void}\r\n */export function createTable(data){// Reference to the container div where the table will be placed\nconst tableContainer=document.getElementById(\"country-continent-name-container\");if(!tableContainer){console.error(\"Table container not found!\");return;}// Define the continent names\nconst continentNames=[\"Africa\",\"America\",\"Antarctic\",\"Asia\",\"Oceania\",\"Europe\"];// Create a container for the tables\nconst tablesContainer=document.createElement(\"table\");tablesContainer.classList.add(\"tables-container\");const tableRow=tablesContainer.createTBody().insertRow();// Loop through each continent and create a table\ncontinentNames.forEach((continent,index)=>{if(continent===\"Antarctic\"){return;}const body=tableRow.insertCell();body.classList.add(\"continent-table\");// Create a table element\nconst table=document.createElement(\"table\");// Create a table header row\nconst bodyRow=table.createTBody().insertRow();const cell=bodyRow.insertCell();cell.textContent=continent;cell.className=continent.toLowerCase();let className=\"cell\";// Loop through the maximum items per column to populate rows\nfor(let i=0;i<continentPopulation[index];i++){const newRow=table.insertRow();// Get the country index\nconst countryIndex=getIndexFromLocation(index,i);const country=data[countryIndex];if(country.getAcceptedNames().length===0){continue;}// Create and insert cells into the row\nconst countryCell=newRow.insertCell();countryCell.textContent=country.getCountryName();countryCell.className=i<continentRealPopulation[index]?className:className+\"-invisible\";}// Append the table to the container div\nbody.appendChild(table);});tableContainer.appendChild(tablesContainer);}/**\r\n * Gets the real index of a country based on its continent and local index.\r\n * @param {number} continent - The continent index.\r\n * @param {number} index - The local index of the country within its continent.\r\n * @returns {number} The real index of the country.\r\n */export function getIndexFromLocation(continent,index){let realIndex=0;// Sum populations of previous continents up to the specified continent\nfor(let i=0;i<continent;i++){realIndex+=continentPopulation[i];}// Add local index within the specified continent\nrealIndex+=index;return realIndex;}","map":{"version":3,"names":["continentPopulation","continentRealPopulation","createTable","data","tableContainer","document","getElementById","console","error","continentNames","tablesContainer","createElement","classList","add","tableRow","createTBody","insertRow","forEach","continent","index","body","insertCell","table","bodyRow","cell","textContent","className","toLowerCase","i","newRow","countryIndex","getIndexFromLocation","country","getAcceptedNames","length","countryCell","getCountryName","appendChild","realIndex"],"sources":["C:/Users/esteb/Documents/GitHub/COTWQ-server/client/src/typescripts/countriesTable.ts"],"sourcesContent":["// countriesTable.ts\r\n\r\nimport { Country } from \"../models/Country\";\r\n\r\n/** Represents the population of each continent. */\r\nconst continentPopulation: [number, number, number, number, number, number] = [56, 49, 3, 52, 19, 45];\r\n\r\n/** Represents the real population of each continent. */\r\nconst continentRealPopulation: [number, number, number, number, number, number] = [53, 35, 3, 48, 13, 42];\r\n\r\n/**\r\n * Creates a table displaying countries grouped by continent.\r\n * @param {Country[]} data - An array of Country objects containing country data.\r\n * @returns {void}\r\n */\r\nexport function createTable(data: Country[]): void {\r\n\t// Reference to the container div where the table will be placed\r\n\tconst tableContainer: HTMLElement | null = document.getElementById(\"country-continent-name-container\");\r\n\r\n\tif (!tableContainer) {\r\n\t\tconsole.error(\"Table container not found!\");\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Define the continent names\r\n\tconst continentNames: string[] = [\"Africa\", \"America\", \"Antarctic\", \"Asia\", \"Oceania\", \"Europe\"];\r\n\r\n\t// Create a container for the tables\r\n\tconst tablesContainer: HTMLTableElement = document.createElement(\"table\");\r\n\ttablesContainer.classList.add(\"tables-container\");\r\n\tconst tableRow: HTMLTableRowElement = tablesContainer.createTBody().insertRow();\r\n\r\n\t// Loop through each continent and create a table\r\n\tcontinentNames.forEach((continent: string, index: number):void => {\r\n\t\tif (continent === \"Antarctic\") {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst body: HTMLTableCellElement = tableRow.insertCell();\r\n\t\tbody.classList.add(\"continent-table\");\r\n\r\n\t\t// Create a table element\r\n\t\tconst table: HTMLTableElement = document.createElement(\"table\");\r\n\r\n\t\t// Create a table header row\r\n\t\tconst bodyRow: HTMLTableRowElement = table.createTBody().insertRow();\r\n\t\tconst cell: HTMLTableCellElement = bodyRow.insertCell();\r\n\t\tcell.textContent = continent;\r\n\t\tcell.className = continent.toLowerCase();\r\n\r\n\t\tlet className: string = \"cell\";\r\n\r\n\t\t// Loop through the maximum items per column to populate rows\r\n\t\tfor (let i: number = 0; i < continentPopulation[index]; i++) {\r\n\t\t\tconst newRow: HTMLTableRowElement = table.insertRow();\r\n\r\n\t\t\t// Get the country index\r\n\t\t\tconst countryIndex: number = getIndexFromLocation(index, i);\r\n\t\t\tconst country: Country = data[countryIndex];\r\n\t\t\tif (country.getAcceptedNames().length === 0) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\t// Create and insert cells into the row\r\n\t\t\tconst countryCell: HTMLTableCellElement = newRow.insertCell();\r\n\t\t\tcountryCell.textContent = country.getCountryName();\r\n\t\t\tcountryCell.className = i < continentRealPopulation[index] ? className : className + \"-invisible\";\r\n\t\t}\r\n\t\t// Append the table to the container div\r\n\t\tbody.appendChild(table);\r\n\t});\r\n\r\n\ttableContainer.appendChild(tablesContainer);\r\n}\r\n\r\n/**\r\n * Gets the real index of a country based on its continent and local index.\r\n * @param {number} continent - The continent index.\r\n * @param {number} index - The local index of the country within its continent.\r\n * @returns {number} The real index of the country.\r\n */\r\nexport function getIndexFromLocation(continent: number, index: number): number {\r\n\tlet realIndex: number = 0;\r\n\r\n\t// Sum populations of previous continents up to the specified continent\r\n\tfor (let i: number = 0; i < continent; i++) {\r\n\t\trealIndex += continentPopulation[i];\r\n\t}\r\n\r\n\t\r\n\t// Add local index within the specified continent\r\n\trealIndex += index;\r\n\t\r\n\treturn realIndex;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}