{"ast":null,"code":"// scene.ts\n\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { Tween, Easing, update } from '@tweenjs/tween.js';\n// Define variables\nlet isRotating = true;\nlet isPlaying = false;\nlet myModel;\nlet lastRenderTime = 0;\nconst minDistance = 70;\nlet controls;\nlet camera;\nlet scene;\nlet hemisphereLight;\n\n/**\r\n * Sets up the scene by creating a renderer, scene, camera, controls, and\r\n * directional light.\r\n * @returns An array containing the renderer and scene.\r\n */\nexport function setupScene() {\n  // Get a reference to the canvas element\n  const canvas = document.getElementById(\"modelCanvas\");\n\n  // Ensure the canvas element exists\n  if (!canvas) {\n    console.error(\"Canvas element 'modelCanvas' not found.\");\n    // Handle the error or provide a fallback\n  }\n\n  // Create a WebGL renderer and set its size to match the canvas\n  const renderer = new THREE.WebGLRenderer({\n    canvas\n  });\n  renderer.setSize(canvas.clientWidth, canvas.clientHeight);\n  document.body.appendChild(renderer.domElement);\n\n  // Create the scene\n  scene = new THREE.Scene();\n\n  // Create the camera\n  camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n  camera.position.set(0, 0, 140);\n\n  // Create the controls\n  controls = new OrbitControls(camera, renderer.domElement);\n  controls.rotateSpeed = 0.5;\n  controls.zoomSpeed = 0.5;\n  controls.panSpeed = 0.5;\n  controls.enablePan = false;\n  controls.enableDamping = true;\n  controls.enabled = isPlaying;\n\n  // Add directional light\n  hemisphereLight = new THREE.HemisphereLight(0xffffff, 0.7);\n  scene.add(hemisphereLight);\n  return [renderer, scene];\n}\n\n/**\r\n * Animates the scene.\r\n * @param {THREE.WebGLRenderer} renderer - The WebGL renderer.\r\n * @param {THREE.Object3D} model - The 3D object representing the model.\r\n */\nexport function animate(renderer, model) {\n  myModel = model;\n  function _animate(currentTime) {\n    const delta = currentTime - lastRenderTime;\n    const cameraPosition = new THREE.Vector3();\n    camera.getWorldPosition(cameraPosition);\n    const distanceToCenter = cameraPosition.length();\n    if (isRotating) {\n      myModel.rotation.y += 0.0005;\n    }\n    if (distanceToCenter < minDistance) {\n      const directionToCenter = cameraPosition.clone().normalize();\n      const newCameraPosition = directionToCenter.multiplyScalar(minDistance);\n      camera.position.copy(newCameraPosition);\n    }\n    hemisphereLight.position.copy(cameraPosition);\n    if (delta >= 16) {\n      controls.update();\n      renderer.render(scene, camera);\n      lastRenderTime = currentTime;\n    }\n    requestAnimationFrame(_animate);\n    update();\n  }\n  _animate(0);\n}\n\n/**\r\n * Updates the state of controls based on the `isPlaying` flag.\r\n */\nfunction updateControls() {\n  controls.enabled = isPlaying;\n}\n\n/**\r\n * Toggles the `isPlaying` flag.\r\n */\nexport function toggleIsPlaying() {\n  isPlaying = !isPlaying;\n  if (isPlaying) {\n    moveModelTo(myModel, 0, null, null);\n    if (isRotating) toggleIsRotating();\n  } else {\n    moveModelTo(myModel, 90, null, null);\n    if (!isRotating) toggleIsRotating();\n  }\n  updateControls(); // Call updateControls to ensure controls are updated\n}\n\n/**\r\n * Toggles the `isRotating` flag.\r\n */\nexport function toggleIsRotating() {\n  isRotating = !isRotating;\n}\n\n/**\r\n * Gets intersections of a raycaster with objects in the scene based on mouse coordinates.\r\n * @param {number} mouseX - The X coordinate of the mouse.\r\n * @param {number} mouseY - The Y coordinate of the mouse.\r\n * @returns {THREE.Intersection[]} An array of intersections.\r\n */\nexport function getIntersect(mouseX, mouseY) {\n  // Create a raycaster\n  const raycaster = new THREE.Raycaster();\n\n  // Set raycaster origin as mouse position in NDC using Vector2\n  const mouseVector = new THREE.Vector2(mouseX, mouseY);\n  raycaster.setFromCamera(mouseVector, camera);\n\n  // Perform raycasting\n  return raycaster.intersectObjects(scene.children, true);\n}\n\n/**\r\n * Moves the model to the specified position.\r\n * @param {THREE.Object3D} model - The 3D object representing the model.\r\n * @param {number | null} x - The X coordinate of the new position.\r\n * @param {number | null} y - The Y coordinate of the new position.\r\n * @param {number | null} z - The Z coordinate of the new position.\r\n */\nexport function moveModelTo(model, x, y, z) {\n  const targetPosition = {\n    x: x !== null ? x : model.position.x,\n    y: y !== null ? y : model.position.y,\n    z: z !== null ? z : model.position.z\n  };\n  new Tween(model.position).to(targetPosition, 1500).easing(Easing.Quadratic.Out).start();\n}\n\n/**\r\n * Sets the camera position to the specified vector.\r\n * @param {THREE.Vector3} vector - The new camera position.\r\n */\nexport function setCameraPosition(vector) {\n  const cameraPosition = new THREE.Vector3();\n  camera.getWorldPosition(cameraPosition);\n  const directionToCenter = vector.clone().normalize();\n  const newCameraPosition = directionToCenter.multiplyScalar(cameraPosition.length());\n  // camera.position.copy(newCameraPosition);\n  new Tween(cameraPosition).to(newCameraPosition, 1000).easing(Easing.Linear.In).onUpdate(() => {\n    camera.position.copy(cameraPosition);\n    camera.lookAt(directionToCenter);\n  }).start();\n}\n\n/**\r\n * Returns the value of the `isPlaying` flag.\r\n * @returns {boolean} The value of the `isPlaying` flag.\r\n */\nexport function getIsPlaying() {\n  return isPlaying;\n}\n\n/**\r\n * Returns the value of the `isRotating` flag.\r\n * @returns {boolean} The value of the `isRotating` flag.\r\n */\nexport function getIsRotating() {\n  return isRotating;\n}","map":{"version":3,"names":["THREE","OrbitControls","Tween","Easing","update","isRotating","isPlaying","myModel","lastRenderTime","minDistance","controls","camera","scene","hemisphereLight","setupScene","canvas","document","getElementById","console","error","renderer","WebGLRenderer","setSize","clientWidth","clientHeight","body","appendChild","domElement","Scene","PerspectiveCamera","window","innerWidth","innerHeight","position","set","rotateSpeed","zoomSpeed","panSpeed","enablePan","enableDamping","enabled","HemisphereLight","add","animate","model","_animate","currentTime","delta","cameraPosition","Vector3","getWorldPosition","distanceToCenter","length","rotation","y","directionToCenter","clone","normalize","newCameraPosition","multiplyScalar","copy","render","requestAnimationFrame","updateControls","toggleIsPlaying","moveModelTo","toggleIsRotating","getIntersect","mouseX","mouseY","raycaster","Raycaster","mouseVector","Vector2","setFromCamera","intersectObjects","children","x","z","targetPosition","to","easing","Quadratic","Out","start","setCameraPosition","vector","Linear","In","onUpdate","lookAt","getIsPlaying","getIsRotating"],"sources":["C:/Users/esteb/Documents/GitHub/COTWQ-server/server/client/src/utils/scene.ts"],"sourcesContent":["// scene.ts\r\n\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\nimport { Tween, Easing, update } from '@tweenjs/tween.js';\r\n// Define variables\r\nlet isRotating: boolean = true;\r\nlet isPlaying: boolean = false;\r\nlet myModel: THREE.Object3D;\r\nlet lastRenderTime: number = 0;\r\nconst minDistance: number = 70;\r\nlet controls: OrbitControls;\r\nlet camera: THREE.PerspectiveCamera;\r\nlet scene: THREE.Scene;\r\nlet hemisphereLight: THREE.HemisphereLight;\r\n\r\n/**\r\n * Sets up the scene by creating a renderer, scene, camera, controls, and\r\n * directional light.\r\n * @returns An array containing the renderer and scene.\r\n */\r\nexport function setupScene(): [THREE.WebGLRenderer, THREE.Scene] {\r\n\t// Get a reference to the canvas element\r\n\tconst canvas: HTMLCanvasElement = document.getElementById(\"modelCanvas\") as HTMLCanvasElement;\r\n\r\n\t// Ensure the canvas element exists\r\n\tif (!canvas) {\r\n\t\tconsole.error(\"Canvas element 'modelCanvas' not found.\");\r\n\t\t// Handle the error or provide a fallback\r\n\t}\r\n\r\n\t// Create a WebGL renderer and set its size to match the canvas\r\n\tconst renderer: THREE.WebGLRenderer = new THREE.WebGLRenderer({ canvas });\r\n\trenderer.setSize(canvas.clientWidth, canvas.clientHeight);\r\n\tdocument.body.appendChild(renderer.domElement);\r\n\r\n\t// Create the scene\r\n\tscene = new THREE.Scene();\r\n\r\n\t// Create the camera\r\n\tcamera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n\tcamera.position.set(0, 0, 140);\r\n\r\n\t// Create the controls\r\n\tcontrols = new OrbitControls(camera, renderer.domElement);\r\n\tcontrols.rotateSpeed = 0.5;\r\n\tcontrols.zoomSpeed = 0.5;\r\n\tcontrols.panSpeed = 0.5;\r\n\tcontrols.enablePan = false;\r\n\tcontrols.enableDamping = true;\r\n\tcontrols.enabled = isPlaying;\r\n\r\n\t// Add directional light\r\n\themisphereLight = new THREE.HemisphereLight(0xffffff, 0.7);\r\n\tscene.add(hemisphereLight);\r\n\r\n\treturn [renderer, scene];\r\n}\r\n\r\n/**\r\n * Animates the scene.\r\n * @param {THREE.WebGLRenderer} renderer - The WebGL renderer.\r\n * @param {THREE.Object3D} model - The 3D object representing the model.\r\n */\r\nexport function animate(renderer: THREE.WebGLRenderer, model: THREE.Object3D): void {\r\n\tmyModel = model;\r\n\r\n\tfunction _animate(currentTime: number): void {\r\n\t\tconst delta: number = currentTime - lastRenderTime;\r\n\t\tconst cameraPosition: THREE.Vector3 = new THREE.Vector3();\r\n\t\tcamera.getWorldPosition(cameraPosition);\r\n\t\tconst distanceToCenter: number = cameraPosition.length();\r\n\r\n\t\t\r\n\t\tif (isRotating) {\r\n\t\t\tmyModel.rotation.y += 0.0005;\r\n\t\t}\r\n\r\n\t\tif (distanceToCenter < minDistance) {\r\n\t\t\tconst directionToCenter: THREE.Vector3 = cameraPosition.clone().normalize();\r\n\t\t\tconst newCameraPosition: THREE.Vector3 = directionToCenter.multiplyScalar(minDistance);\r\n\t\t\tcamera.position.copy(newCameraPosition);\r\n\t\t}\r\n\r\n\t\themisphereLight.position.copy(cameraPosition);\r\n\r\n\t\tif (delta >= 16) {\r\n\t\t\tcontrols.update();\r\n\t\t\trenderer.render(scene, camera);\r\n\t\t\tlastRenderTime = currentTime;\r\n\t\t}\r\n\r\n\t\trequestAnimationFrame(_animate);\r\n\t\tupdate();\r\n\t}\r\n\r\n\t_animate(0);\r\n}\r\n\r\n/**\r\n * Updates the state of controls based on the `isPlaying` flag.\r\n */\r\nfunction updateControls(): void {\r\n\tcontrols.enabled = isPlaying;\r\n}\r\n\r\n/**\r\n * Toggles the `isPlaying` flag.\r\n */\r\nexport function toggleIsPlaying(): void {\r\n\tisPlaying = !isPlaying;\r\n\tif (isPlaying) {\r\n\t\tmoveModelTo(myModel, 0, null, null);\r\n\t\tif (isRotating) toggleIsRotating();\r\n\t} else {\r\n\t\tmoveModelTo(myModel, 90, null, null);\r\n\t\tif (!isRotating) toggleIsRotating();\r\n\r\n\t}\r\n\r\n\tupdateControls(); // Call updateControls to ensure controls are updated\r\n}\r\n\r\n/**\r\n * Toggles the `isRotating` flag.\r\n */\r\nexport function toggleIsRotating(): void {\r\n\tisRotating = !isRotating;\r\n}\r\n\r\n/**\r\n * Gets intersections of a raycaster with objects in the scene based on mouse coordinates.\r\n * @param {number} mouseX - The X coordinate of the mouse.\r\n * @param {number} mouseY - The Y coordinate of the mouse.\r\n * @returns {THREE.Intersection[]} An array of intersections.\r\n */\r\nexport function getIntersect(mouseX: number, mouseY: number): THREE.Intersection[] {\r\n\t// Create a raycaster\r\n\tconst raycaster: THREE.Raycaster = new THREE.Raycaster();\r\n\r\n\t// Set raycaster origin as mouse position in NDC using Vector2\r\n\tconst mouseVector: THREE.Vector2 = new THREE.Vector2(mouseX, mouseY);\r\n\traycaster.setFromCamera(mouseVector, camera);\r\n\r\n\t// Perform raycasting\r\n\treturn raycaster.intersectObjects(scene.children, true);\r\n}\r\n\r\n/**\r\n * Moves the model to the specified position.\r\n * @param {THREE.Object3D} model - The 3D object representing the model.\r\n * @param {number | null} x - The X coordinate of the new position.\r\n * @param {number | null} y - The Y coordinate of the new position.\r\n * @param {number | null} z - The Z coordinate of the new position.\r\n */\r\nexport function moveModelTo(model: THREE.Object3D, x: number | null, y: number | null, z: number | null): void {\r\n\tconst targetPosition = {\r\n\t\tx: x !== null ? x : model.position.x,\r\n\t\ty: y !== null ? y : model.position.y,\r\n\t\tz: z !== null ? z : model.position.z,\r\n\t  };\r\n\t\r\n\tnew Tween(model.position)\r\n\t.to(targetPosition, 1500)\r\n\t.easing(Easing.Quadratic.Out)\r\n\t.start();\r\n}\r\n\r\n/**\r\n * Sets the camera position to the specified vector.\r\n * @param {THREE.Vector3} vector - The new camera position.\r\n */\r\nexport function setCameraPosition(vector: THREE.Vector3): void {\r\n\tconst cameraPosition: THREE.Vector3 = new THREE.Vector3();\r\n\tcamera.getWorldPosition(cameraPosition);\r\n\tconst directionToCenter: THREE.Vector3 = vector.clone().normalize();\r\n\tconst newCameraPosition: THREE.Vector3 = directionToCenter.multiplyScalar(cameraPosition.length());\r\n\t// camera.position.copy(newCameraPosition);\r\n\tnew Tween(cameraPosition)\r\n    .to(newCameraPosition, 1000)\r\n    .easing(Easing.Linear.In)\r\n    .onUpdate(() => {\r\n      camera.position.copy(cameraPosition);\r\n      camera.lookAt(directionToCenter);\r\n    })\r\n    .start();\r\n}\r\n\r\n/**\r\n * Returns the value of the `isPlaying` flag.\r\n * @returns {boolean} The value of the `isPlaying` flag.\r\n */\r\nexport function getIsPlaying(): boolean {\r\n\treturn isPlaying;\r\n}\r\n\r\n/**\r\n * Returns the value of the `isRotating` flag.\r\n * @returns {boolean} The value of the `isRotating` flag.\r\n */\r\nexport function getIsRotating(): boolean {\r\n\treturn isRotating;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}